/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    'user-plants': UserPlant;
    lsystems: Lsystem;
    varieties: Variety;
    plants: Plant;
    images: Image;
    audio: Audio;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    'user-plants': UserPlantsSelect<false> | UserPlantsSelect<true>;
    lsystems: LsystemsSelect<false> | LsystemsSelect<true>;
    varieties: VarietiesSelect<false> | VarietiesSelect<true>;
    plants: PlantsSelect<false> | PlantsSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    audio: AudioSelect<false> | AudioSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-plants".
 */
export interface UserPlant {
  id: string;
  /**
   * User who owns the plant.
   */
  user: string | User;
  /**
   * Plant associated with the user.
   */
  plant: string | Plant;
  /**
   * Variety of the plant.
   */
  variety: string | Variety;
  /**
   * The number of iterations to perform.
   */
  iterations: number;
  /**
   * The string of the L-System.
   */
  lSystemString: string;
  /**
   * The wet level of the plant.
   */
  wetLevel: number;
  /**
   * The date the plant was last watered.
   */
  lastWatered?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plants".
 */
export interface Plant {
  id: string;
  /**
   * The name of the plant.
   */
  name: string;
  /**
   * Short description of the plant.
   */
  description?: string | null;
  /**
   * The L-System associated with this plant.
   */
  lSystem: string | Lsystem;
  /**
   * Preview image of the plant.
   */
  previewImage?: (string | null) | Image;
  /**
   * Is this plant a trailing plant?
   */
  isTrailing?: boolean | null;
  /**
   * Does this plant have leaves?
   */
  hasLeaves?: boolean | null;
  /**
   * Is this plant deciduous?
   */
  isDeciduous?: boolean | null;
  params: {
    /**
     * The number of max iterations to perform.
     */
    maxIterations: number;
    branchs: {
      /**
       * The angle of a new branch.
       */
      angle: number;
      /**
       * The reduction of the angle of a new branch.
       */
      angleReduction: number;
      /**
       * The width of the branch.
       */
      baseWidth: number;
      /**
       * The with reduction width of the branch.
       */
      widthReduction: number;
      /**
       * The length of the branch.
       */
      baseLength: number;
      /**
       * The max length of a new branch.
       */
      maxLength: number;
      /**
       * The reduction of the length of a new branch.
       */
      lengthReduction: number;
      /**
       * The randomness of the three.
       */
      randomness: number;
    };
    leaves: {
      /**
       * The width of the leaves.
       */
      sizeX: number;
      /**
       * The height of the leaves.
       */
      sizeY: number;
      /**
       * The shape of the leaves.
       */
      shape: 'triangle' | 'rectangle' | 'ellipse';
    };
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lsystems".
 */
export interface Lsystem {
  id: string;
  /**
   * The name of the L-System.
   */
  name: string;
  /**
   * The initial string of the L-System.
   */
  axiom: string;
  /**
   * The production rules of the L-System. S (Seed), F (Branch), L (Leaf), T (Spine),+ (Turn Right), - (Turn Left), [ (Push State), ] (Pop State).
   */
  rules: {
    /**
     * The predecessor string.
     */
    predecessor: string;
    /**
     * The successor string.
     */
    successor?: string | null;
    /**
     * The odds of this rule being applied.
     */
    odds: number;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "varieties".
 */
export interface Variety {
  id: string;
  /**
   * The name of the variety.
   */
  name: string;
  /**
   * The colors of the branches.
   */
  branchColors?:
    | {
        color?: string | null;
        id?: string | null;
      }[]
    | null;
  /**
   * The colors of the leaves.
   */
  leafColors?:
    | {
        color?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audio".
 */
export interface Audio {
  id: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'user-plants';
        value: string | UserPlant;
      } | null)
    | ({
        relationTo: 'lsystems';
        value: string | Lsystem;
      } | null)
    | ({
        relationTo: 'varieties';
        value: string | Variety;
      } | null)
    | ({
        relationTo: 'plants';
        value: string | Plant;
      } | null)
    | ({
        relationTo: 'images';
        value: string | Image;
      } | null)
    | ({
        relationTo: 'audio';
        value: string | Audio;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-plants_select".
 */
export interface UserPlantsSelect<T extends boolean = true> {
  user?: T;
  plant?: T;
  variety?: T;
  iterations?: T;
  lSystemString?: T;
  wetLevel?: T;
  lastWatered?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "lsystems_select".
 */
export interface LsystemsSelect<T extends boolean = true> {
  name?: T;
  axiom?: T;
  rules?:
    | T
    | {
        predecessor?: T;
        successor?: T;
        odds?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "varieties_select".
 */
export interface VarietiesSelect<T extends boolean = true> {
  name?: T;
  branchColors?:
    | T
    | {
        color?: T;
        id?: T;
      };
  leafColors?:
    | T
    | {
        color?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "plants_select".
 */
export interface PlantsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  lSystem?: T;
  previewImage?: T;
  isTrailing?: T;
  hasLeaves?: T;
  isDeciduous?: T;
  params?:
    | T
    | {
        maxIterations?: T;
        branchs?:
          | T
          | {
              angle?: T;
              angleReduction?: T;
              baseWidth?: T;
              widthReduction?: T;
              baseLength?: T;
              maxLength?: T;
              lengthReduction?: T;
              randomness?: T;
            };
        leaves?:
          | T
          | {
              sizeX?: T;
              sizeY?: T;
              shape?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "audio_select".
 */
export interface AudioSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}